#!/usr/bin/env bash
# This script was generated by bashly 1.0.0 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

version_command() {
  echo "$version"
}

cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - Because you deserve it.\n"
    echo

  else
    printf "cli - Because you deserve it.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli [OPTIONS] COMMAND\n"
  printf "  cli [COMMAND] --help | -h\n"
  printf "  cli --version | -v\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Tools for exploring, monitoring, and executing your test suites.\n" "suites"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--quiet, -q"
    printf "    Displays less and possibly no output. Has no effect if '--json' is also\n    specified\n"
    echo

    printf "  %s\n" "--auth-file"
    printf "    Specifies the path to a file containing identifying information for the\n    authority with which actions should be taken (overrides path specified\n    in config file and env var)\n"
    echo

    printf "  %s\n" "--json"
    printf "    Displays all STDOUT output as JSON (messages to STDERR will still print\n    as normal, but also be included in the final JSON report)\n"
    echo

    printf "  %s\n" "--interactive"
    printf "    Tips the CLI out of its default hands-free, fire-and-forget, non-\n    interactive mode (which is useful for CI integrations and scripting) to\n    one better-suited to human usage.\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

  fi
}

cli_suites_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli suites - Tools for exploring, monitoring, and executing your test suites.\n"
    echo

  else
    printf "cli suites - Tools for exploring, monitoring, and executing your test suites.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli suites COMMAND\n"
  printf "  cli suites [COMMAND] --help | -h\n"
  echo

  printf "%s\n" "Commands:"
  printf "  %s   Lists accessible test suites, or the contents of a particular test\n" "ls      "
  printf "  %s   Submits a test suite, or subset of its tests, for execution.\n" "run     "
  printf "  %s   Reports the latest progress of a given test execution.\n" "progress"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

cli_suites_ls_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli suites ls\n"
    echo

    printf "  Lists accessible test suites, or the contents of a particular test\n  suite if provided\n"
    echo

  else
    printf "cli suites ls - Lists accessible test suites, or the contents of a particular test\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli suites ls [SUITE-ID]\n"
  printf "  cli suites ls --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SUITE-ID"
    printf "    (optional) An ID for the test suite whose contents should be listed\n"
    echo

  fi
}

cli_suites_run_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli suites run - Submits a test suite, or subset of its tests, for execution.\n"
    echo

  else
    printf "cli suites run - Submits a test suite, or subset of its tests, for execution.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli suites run SUITE [OPTIONS]\n"
  printf "  cli suites run --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--no-wait"
    printf "    Exits after submitting, without waiting for test execution to\n    complete\n"
    echo

    printf "  %s\n" "--test ID (repeatable)"
    printf "    An ID for a test in the given suite to execute. May be used\n    multiple times to run a larger subset of the given test suite.\n"
    echo

    printf "  %s\n" "--origin URL"
    printf "    Overrides the origin URL from which the tests will start\n"
    echo

    printf "  %s\n" "--retries NUM"
    printf "    Zero or a positive integer specifying how many times to retry a\n    failing test before giving up (min: 0, max: 3)\n"
    echo

    printf "  %s\n" "--concurrency NUM"
    printf "    Zero or positive integer specifying how many universes split your\n    test execution across\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    printf "%s\n" "Arguments:"

    printf "  %s\n" "SUITE"
    printf "    An ID for the test suite to execute\n"
    echo

  fi
}

cli_suites_progress_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli suites progress - Reports the latest progress of a given test execution.\n"
    echo

  else
    printf "cli suites progress - Reports the latest progress of a given test execution.\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli suites progress [OPTIONS]\n"
  printf "  cli suites progress --help | -h\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    printf "  %s\n" "--execution ID (required)"
    printf "    An ID for a test execution whose progress to inspect\n"
    echo

    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if ((${#args[@]})); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

cli_suites_ls_command() {
  echo "# this file is located in 'src/suites_ls_command.sh'"
  echo "# code for 'cli suites ls' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

cli_suites_run_command() {
  echo "Running all the things!"

}

cli_suites_progress_command() {
  echo "# this file is located in 'src/suites_progress_command.sh'"
  echo "# code for 'cli suites progress' goes here"
  echo "# you can edit it freely and regenerate (it will not be overwritten)"
  inspect_args

}

parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cli_usage
        exit
        ;;

      --quiet | -q)

        args['--quiet']=1
        shift
        ;;

      --auth-file)

        args['--auth-file']=1
        shift
        ;;

      --json)

        args['--json']=1
        shift
        ;;

      --interactive)

        args['--interactive']=1
        shift
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    suites)
      action="suites"
      shift
      cli_suites_parse_requirements "$@"
      shift $#
      ;;

    "")
      cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

cli_suites_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_suites_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action=${1:-}

  case $action in
    -*) ;;

    ls)
      action="ls"
      shift
      cli_suites_ls_parse_requirements "$@"
      shift $#
      ;;

    run)
      action="run"
      shift
      cli_suites_run_parse_requirements "$@"
      shift $#
      ;;

    progress)
      action="progress"
      shift
      cli_suites_progress_parse_requirements "$@"
      shift $#
      ;;

    "")
      cli_suites_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

cli_suites_ls_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_suites_ls_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="suites ls"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['suite-id']+x} ]]; then

          args['suite-id']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

}

cli_suites_run_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_suites_run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="suites run"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --no-wait)

        args['--no-wait']=1
        shift
        ;;

      --test)

        if [[ -n ${2+x} ]]; then

          if [[ -z ${args['--test']+x} ]]; then
            args['--test']="\"$2\""
          else
            args['--test']="${args[--test]} \"$2\""
          fi
          shift
          shift
        else
          printf "%s\n" "--test requires an argument: --test ID" >&2
          exit 1
        fi
        ;;

      --origin)

        if [[ -n ${2+x} ]]; then

          args['--origin']="$2"
          shift
          shift
        else
          printf "%s\n" "--origin requires an argument: --origin URL" >&2
          exit 1
        fi
        ;;

      --retries)

        if [[ -n ${2+x} ]]; then

          if [[ -n $(validate_integer "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--retries NUM" "$(validate_integer "$2")" >&2
            exit 1
          fi

          args['--retries']="$2"
          shift
          shift
        else
          printf "%s\n" "--retries requires an argument: --retries NUM" >&2
          exit 1
        fi
        ;;

      --concurrency)

        if [[ -n ${2+x} ]]; then

          if [[ -n $(validate_integer "$2") ]]; then
            printf "validation error in %s:\n%s\n" "--concurrency NUM" "$(validate_integer "$2")" >&2
            exit 1
          fi

          args['--concurrency']="$2"
          shift
          shift
        else
          printf "%s\n" "--concurrency requires an argument: --concurrency NUM" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        if [[ -z ${args['suite']+x} ]]; then

          args['suite']=$1
          shift
        else
          printf "invalid argument: %s\n" "$key" >&2
          exit 1
        fi

        ;;

    esac
  done

  if [[ -z ${args['suite']+x} ]]; then
    printf "missing required argument: SUITE\nusage: cli suites run SUITE [OPTIONS]\n" >&2
    exit 1
  fi

}

cli_suites_progress_parse_requirements() {

  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_suites_progress_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  action="suites progress"

  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      --execution)

        if [[ -n ${2+x} ]]; then

          args['--execution']="$2"
          shift
          shift
        else
          printf "%s\n" "--execution requires an argument: --execution ID" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)

        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  if [[ -z ${args['--execution']+x} ]]; then
    printf "missing required flag: --execution ID\n" >&2
    exit 1
  fi

}

initialize() {
  version="2.7.42"
  long_usage=''
  set -e


}

run() {
  declare -A args=()
  declare -a other_args=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "suites")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_suites_usage
      else
        cli_suites_command
      fi
      ;;

    "suites ls")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_suites_ls_usage
      else
        cli_suites_ls_command
      fi
      ;;

    "suites run")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_suites_run_usage
      else
        cli_suites_run_command
      fi
      ;;

    "suites progress")
      if [[ ${args['--help']:-} ]]; then
        long_usage=yes
        cli_suites_progress_usage
      else
        cli_suites_progress_command
      fi
      ;;

  esac
}

initialize
run "$@"
